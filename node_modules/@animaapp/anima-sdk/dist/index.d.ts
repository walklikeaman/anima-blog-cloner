import { Component } from '@figma/rest-api-spec';
import { ComponentSet } from '@figma/rest-api-spec';
import { FigmaRestApi } from '@animaapp/http-client-figma';
import { GetFileResponse } from '@figma/rest-api-spec';
import { Node as Node_2 } from '@figma/rest-api-spec';
import { Style } from '@figma/rest-api-spec';

export declare class Anima {
    #private;
    constructor({ auth, apiBaseAddress, }?: {
        auth?: Auth;
        apiBaseAddress?: string;
        path?: string;
    });
    protected hasAuth(): boolean;
    set auth(auth: Auth);
    protected get headers(): Record<string, string>;
    generateCode(params: GetCodeParams, handler?: GetCodeHandler, signal?: AbortSignal): Promise<AnimaSDKResult>;
    generateCodeFromWebsite(params: GetCodeFromWebsiteParams, handler?: GetCodeFromWebsiteHandler, signal?: AbortSignal): Promise<AnimaSDKResult>;
    /**
     * Generates code from a text prompt using AI.
     *
     * This method sends a prompt to the Anima API and generates code based on the description provided.
     * It supports real-time streaming of the generation process through Server-Sent Events (SSE).
     *
     * @param params - The parameters for code generation
     * @param params.prompt - The text prompt describing what code to generate
     * @param params.settings - Code generation settings (framework, language, styling, etc.)
     * @param params.assetsStorage - Optional asset storage configuration
     * @param params.tracking - Optional tracking information
     * @param params.webhookUrl - Optional webhook URL for completion notification
     * @param handler - Event handler for processing SSE messages during generation
     * @param signal - Optional AbortSignal to cancel the request
     * @returns Promise resolving to AnimaSDKResult with generated files and metadata
     *
     * @example
     * ```typescript
     * const result = await anima.generateCodeFromPrompt({
     *   prompt: "Create a login form with email and password fields",
     *   settings: {
     *     framework: "react",
     *     language: "typescript",
     *     styling: "tailwind"
     *   }
     * }, {
     *   onStart: ({ sessionId }) => console.log("Started:", sessionId),
     *   onGeneratingCode: ({ progress }) => console.log("Progress:", progress),
     *   onCodegenCompleted: () => console.log("Generation completed!")
     * });
     * ```
     */
    generateCodeFromPrompt(params: GetCodeFromPromptParams, handler?: GetCodeFromPromptHandler, signal?: AbortSignal): Promise<AnimaSDKResult>;
    /**
     * @deprecated This method will be removed soon, please use `generateCodeFromWebsite` instead.
     */
    generateLink2Code(params: GetLink2CodeParams, handler?: GetLink2CodeHandler, signal?: AbortSignal): Promise<AnimaSDKResult>;
}

export declare type AnimaFiles = Record<string, {
    content: string;
    isBinary: boolean;
}>;

export declare type AnimaSDKResult = BaseResult & {
    files: AnimaFiles;
    assets?: Array<{
        name: string;
        url: string;
    }>;
};

export declare type AssetsStorage = {
    strategy: "host";
} | {
    strategy: "external";
    url: string;
};

export declare type Auth = {
    token: string;
    teamId: string;
} | {
    token: string;
    userId?: string;
};

export declare type BaseResult = {
    sessionId: string;
    figmaFileName?: string;
    figmaSelectedFrameName?: string;
    tokenUsage: number;
};

export declare type BaseSettings = {
    codegenSettings?: Record<string, unknown>;
};

export declare class CodegenError extends Error {
    status?: number;
    detail?: unknown;
    constructor({ name, reason, status, detail, }: {
        name: string;
        reason: CommonApiError | GetCodeFromFigmaErrorReason | CodegenRouteErrorReason | SDKErrorReason | GetCodeFromWebsiteErrorReason | GetCodeFromPromptErrorReason;
        status?: number;
        detail?: unknown;
    });
}

/**
 * @deprecated This type is deprecated and will be removed soon.
 */
export declare type CodegenErrorReason = GetCodeFromFigmaErrorReason;

export declare type CodegenResult = BaseResult & {
    files: Record<string, {
        code: string;
        type: "code";
    }>;
};

/**
 * Codegen errors from the "/codegen" route
 */
export declare type CodegenRouteErrorReason = "Not all frames id from responsive pages are mentioned on the nodes id list" | "Too many screens to import";

export declare type CodegenSettings = BaseSettings & {
    language?: "typescript" | "javascript";
    model?: string;
    framework: "react" | "html";
    styling: "plain_css" | "css_modules" | "styled_components" | "tailwind" | "sass" | "scss" | "inline_styles";
    uiLibrary?: "mui" | "antd" | "radix" | "shadcn" | "clean_react";
    responsivePages?: Array<{
        name: string;
        framesId: string[];
    }>;
    enableTranslation?: boolean;
    enableUILibraryTheming?: boolean;
    enableCompactStructure?: boolean;
    enableAutoSplit?: boolean;
    autoSplitThreshold?: number;
    disableMarkedForExport?: boolean;
    allowAutoSelectFirstNode?: boolean;
    enableDisplayScreenModelId?: boolean;
    enableGeneratePackageLock?: boolean;
    enableAnimationsPreset?: boolean;
    enableDisplayDataId?: boolean;
    enableDisplayDataName?: boolean;
    url?: string;
    prompt?: string;
    images?: Array<{
        url: string;
    }>;
};

/**
 * Errors from Anima API, common across multiple routes.
 */
export declare type CommonApiError = "Missing Authorization header" | "Invalid Authorization header" | "Missing teamId" | "Internal server error" | "Forbidden, no team access" | "Requested Usage Exceeds Limit" | "Too many concurrent jobs" | "Invalid Anima token";

/**
 * Creates a Server-Sent Events (SSE) `Response` that forwards all messages from the code generation from prompt stream.
 *
 * But, if the first message indicates an error (e.g., connection failed), the function returns a 500 response with the error message.
 *
 * @param {Anima} anima - The Anima instance to use for creating the data stream.
 * @param {GetCodeFromPromptParams} params - The parameters for the code generation request.
 * @returns {Promise<Response>} - A promise that resolves to an HTTP response.
 */
export declare const createCodeFromPromptResponseEventStream: (anima: Anima, params: GetCodeFromPromptParams) => Promise<Response>;

/**
 * Prompt to Code (p2c) stream flow.
 *
 * Start the prompt to code generation and creates a ReadableStream to output its result.
 *
 * The stream is closed when the code generation ends.
 *
 * @param {Anima} anima - An Anima service instance to generate the code from.
 * @param {GetCodeFromPromptParams} params - Parameters required for the code generation process.
 * @returns {ReadableStream<StreamCodeFromPromptMessage>} - A ReadableStream that emits messages related to the code generation process.
 */
export declare const createCodeFromPromptStream: (anima: Anima, params: GetCodeFromPromptParams) => ReadableStream<StreamCodeFromPromptMessage>;

/**
 * Creates a Server-Sent Events (SSE) `Response` that forwards all messages from the code generation from website stream.
 *
 * But, if the first message indicates an error (e.g., connection failed), the function returns a 500 response with the error message.
 *
 * @param {Anima} anima - The Anima instance to use for creating the data stream.
 * @param {GetCodeFromWebsiteParams} params - The parameters for the code generation request.
 * @returns {Promise<Response>} - A promise that resolves to an HTTP response.
 */
export declare const createCodeFromWebsiteResponseEventStream: (anima: Anima, params: GetCodeFromWebsiteParams) => Promise<Response>;

/**
 * Start the code generation from website and creates a ReadableStream to output its result.
 *
 * The stream is closed when the code generation ends.
 *
 * @param {Anima} anima - An Anima service instance to generate the code from.
 * @param {GetCodeFromWebsiteParams} params - Parameters required for the code generation process.
 * @returns {ReadableStream<StreamCodeFromWebsiteMessage>} - A ReadableStream that emits messages related to the code generation process.
 */
export declare const createCodeFromWebsiteStream: (anima: Anima, params: GetCodeFromWebsiteParams) => ReadableStream<StreamCodeFromWebsiteMessage>;

/**
 * Creates a Server-Sent Events (SSE) `Response` that forwards all messages from the code generation stream.
 *
 * But, if the first message indicates an error (e.g., connection failed), the function returns a 500 response with the error message.
 *
 * @param {Anima} anima - The Anima instance to use for creating the data stream.
 * @param {GetCodeParams} params - The parameters for the code generation request.
 * @returns {Promise<Response>} - A promise that resolves to an HTTP response.
 */
export declare const createCodegenResponseEventStream: (anima: Anima, params: GetCodeParams) => Promise<Response>;

/**
 * Start the code generation and creates a ReadableStream to output its result.
 *
 * The stream is closed when the codegen ends.
 *
 * @param {Anima} anima - An Anima service instance to generate the code from.
 * @param {GetCodeParams} params - Parameters required for the code generation process.
 * @returns {ReadableStream<StreamCodgenMessage>} - A ReadableStream that emits messages related to the code generation process.
 */
export declare const createCodegenStream: (anima: Anima, params: GetCodeParams) => ReadableStream<StreamCodgenMessage>;

/**
 * @deprecated This function will be removed soon, please use `createCodeFromWebsiteResponseEventStream` instead.
 * Creates a Server-Sent Events (SSE) `Response` that forwards all messages from the URL to code generation stream.
 *
 * But, if the first message indicates an error (e.g., connection failed), the function returns a 500 response with the error message.
 *
 * @param {Anima} anima - The Anima instance to use for creating the data stream.
 * @param {GetLink2CodeParams} params - The parameters for the URL to code generation request.
 * @returns {Promise<Response>} - A promise that resolves to an HTTP response.
 */
export declare const createLink2CodeResponseEventStream: (anima: Anima, params: GetLink2CodeParams) => Promise<Response>;

/**
 * @deprecated This function will be removed soon, please use `createCodeFromWebsiteStream` instead.
 * @experimental
 * This API is experimental and may change or be removed in future releases.
 * Link2Code (l2c) stream flow.
 *
 * Start the URL to code generation and creates a ReadableStream to output its result.
 *
 * The stream is closed when the URL to code generation ends.
 *
 * @param {Anima} anima - An Anima service instance to generate the code from.
 * @param {GetLink2CodeParams} params - Parameters required for the URL to code generation process.
 * @returns {ReadableStream<StreamL2CMessage>} - A ReadableStream that emits messages related to the URL to code generation process.
 */
export declare const createLink2CodeStream: (anima: Anima, params: GetLink2CodeParams) => ReadableStream<StreamL2CMessage>;

export declare type FigmaApiError = {
    cause: {
        message?: string;
        body: {
            err: string;
            status: number;
        };
    };
};

export declare type FigmaApiErrorType = "FigmaTokenIssue" | "RateLimitExceeded" | "NotFound" | "UnknownFigmaApiException" | "RequestTooLarge";

export declare type FigmaNode = Node_2;

export declare type FigmaPage = {
    id: string;
    name: string;
};

export declare class FigmaTokenIssue extends Error {
    fileKey: string;
    reason: string;
    constructor({ fileKey, reason, cause, }: {
        fileKey: string;
        reason: string;
        cause?: unknown;
    });
}

export declare const findChildrenNode: (node: FigmaNode, targetNodeId: string) => FigmaNode | null;

export declare const formatToFigmaLink: ({ fileKey, nodeId, duplicate, }: {
    fileKey: string;
    nodeId?: string;
    duplicate?: boolean;
}) => URL;

export declare type GeneratingCodePayload = {
    status: "success" | "running" | "failure";
    progress: number;
    files: AnimaFiles;
};

/**
 * Codegen errors from the worker
 */
export declare type GetCodeFromFigmaErrorReason = "Selected node type is not supported" | "Invisible group nodes are unsupported" | "Selected node is a page with multiple children" | "Selected node is a page with no valid children" | "There is no node with the given id" | "Invalid Figma token" | "Anima API connection error" | "Figma token expired" | "Invalid user token" | "Figma file not found" | "Figma rate limit exceeded" | "Figma selection too large" | "Invalid responsive page node type" | "Unknown";

/**
 * Errors from the Prompt To Code Flow
 */
export declare type GetCodeFromPromptErrorReason = "Invalid prompt" | "Generation failed" | "Unknown";

export declare type GetCodeFromPromptHandler = ((message: SSEGetCodeFromPromptMessage) => void) | {
    onQueueing?: ({ sessionId }: {
        sessionId: string;
    }) => void;
    onStart?: ({ sessionId }: {
        sessionId: string;
    }) => void;
    onAssetsUploaded?: () => void;
    onAssetsList?: ({ assets, }: {
        assets: Array<{
            name: string;
            url: string;
        }>;
    }) => void;
    onGeneratingCode?: ({ status, progress, files, }: {
        status: "success" | "running" | "failure";
        progress: number;
        files: AnimaFiles;
    }) => void;
    onCodegenCompleted?: () => void;
};

export declare type GetCodeFromPromptParams = {
    prompt: string;
    images?: Array<{
        url: string;
    }>;
    assetsStorage?: AssetsStorage;
    settings: GetCodeFromPromptSettings;
    tracking?: TrackingInfos;
    webhookUrl?: string;
};

export declare type GetCodeFromPromptSettings = BaseSettings & {
    language?: "typescript";
    framework: "react" | "html";
    styling: "tailwind" | "inline_styles";
    uiLibrary?: "shadcn";
};

/**
 * Errors from the Website To Code Flow
 */
export declare type GetCodeFromWebsiteErrorReason = "Scraping is blocked" | "Unknown";

export declare type GetCodeFromWebsiteHandler = ((message: SSEGetCodeFromWebsiteMessage) => void) | {
    onQueueing?: ({ sessionId }: {
        sessionId: string;
    }) => void;
    onStart?: ({ sessionId }: {
        sessionId: string;
    }) => void;
    onAssetsUploaded?: () => void;
    onAssetsList?: ({ assets, }: {
        assets: Array<{
            name: string;
            url: string;
        }>;
    }) => void;
    onGeneratingCode?: ({ status, progress, files, }: {
        status: "success" | "running" | "failure";
        progress: number;
        files: AnimaFiles;
    }) => void;
    onCodegenCompleted?: () => void;
};

export declare type GetCodeFromWebsiteParams = {
    url?: string;
    mhtml?: string;
    assetsStorage?: AssetsStorage;
    settings: GetCodeFromWebsiteSettings;
    tracking?: TrackingInfos;
    webhookUrl?: string;
    prompt?: string;
    images?: Array<{
        url: string;
    }>;
    experimental_useNewReactEngine?: boolean;
};

export declare type GetCodeFromWebsiteSettings = BaseSettings & {
    language?: "typescript";
    framework: "react" | "html";
    styling: "tailwind" | "inline_styles";
    uiLibrary?: "shadcn";
};

export declare type GetCodeHandler = ((message: SSEGetCodeFromFigmaMessage) => void) | {
    onQueueing?: ({ sessionId }: {
        sessionId: string;
    }) => void;
    onStart?: ({ sessionId }: {
        sessionId: string;
    }) => void;
    onPreCodegen?: ({ message }: {
        message: string;
    }) => void;
    onAssetsUploaded?: () => void;
    onAssetsList?: ({ assets, }: {
        assets: Array<{
            name: string;
            url: string;
        }>;
    }) => void;
    onFigmaMetadata?: ({ figmaFileName, figmaSelectedFrameName, }: {
        figmaFileName: string;
        figmaSelectedFrameName: string;
    }) => void;
    onGeneratingCode?: ({ status, progress, files, }: {
        status: "success" | "running" | "failure";
        progress: number;
        files: AnimaFiles;
    }) => void;
    onCodegenCompleted?: () => void;
};

export declare type GetCodeParams = {
    fileKey: string;
    figmaToken?: string;
    nodesId: string[];
    assetsStorage?: AssetsStorage;
    settings: CodegenSettings;
    tracking?: TrackingInfos;
    webhookUrl?: string;
    prompt?: string;
    images?: Array<{
        url: string;
    }>;
};

export declare const getFigmaApiErrorType: (error: Error) => FigmaApiErrorType;

export declare const getFigmaFile: ({ fileKey, authToken, figmaRestApi, params, signal, }: GetFilePagesParams) => Promise<GetFileResponse>;

export declare const getFileNodes: ({ fileKey, authToken, nodeIds, figmaRestApi, params, signal, }: GetFileNodesParams) => Promise<{
    [key: string]: {
        document: Node_2;
        components: {
            [key: string]: Component;
        };
        componentSets: {
            [key: string]: ComponentSet;
        };
        schemaVersion: number;
        styles: {
            [key: string]: Style;
        };
    };
}>;

export declare type GetFileNodesParams = {
    fileKey: string;
    authToken?: string;
    nodeIds: string[];
    figmaRestApi?: FigmaRestApi;
    params?: Record<string, string | number>;
    signal?: AbortSignal;
};

export declare type GetFilePagesParams = {
    fileKey: string;
    authToken?: string;
    figmaRestApi?: FigmaRestApi;
    params?: Record<string, string | number | undefined>;
    signal?: AbortSignal;
};

export declare type GetFilePagesResult = FigmaPage[] | undefined;

export declare type GetFileParams = {
    fileKey: string;
    authToken?: string;
    figmaRestApi?: FigmaRestApi;
};

/**
 * @deprecated This type is deprecated and will be removed soon.
 */
export declare type GetLink2CodeHandler = GetCodeFromWebsiteHandler;

/**
 * @deprecated This type is deprecated and will be removed soon.
 */
export declare type GetLink2CodeParams = {
    params: L2CParams;
    assetsStorage?: AssetsStorage;
    tracking?: TrackingInfos;
};

export declare const getRelatedScreenFiles: ({ files, screenPath, }: {
    files: AnimaFiles;
    screenPath?: string;
}) => AnimaFiles;

declare type InvalidNodeForCodegenReason = "Selected node is a page with multiple children" | "Selected node is a page with no valid children" | "There is no node with the given id" | "Selected node type is not supported";

export declare const isFigmaTokenIssue: (error: Error) => boolean;

/**
 * Check if the pair "design" + "node id" is valid for code generation.
 * May recommend a node that is not the one passed as argument.
 */
export declare const isNodeCodegenCompatible: (design: GetFileResponse, nodeId: string, options?: {
    allowAutoSelectFirstNode: boolean;
}) => ValidateNodeForCodegenResult;

export declare const isNotFound: (error: Error) => boolean;

export declare const isRateLimitExceeded: (error: Error) => boolean;

export declare const isRequestTooLarge: (error: Error) => boolean;

export declare const isUnknownFigmaApiException: (error: Error) => boolean;

export declare const isValidFigmaUrl: (figmaLink: string) => [hasCorrectPrefix: boolean, fileKey: string, nodeId: string];

/**
 * @deprecated This type is deprecated and will be removed soon.
 */
export declare type L2CParams = {
    input: L2CParamsInput;
    conventions: L2CParamsConvention;
    assetsStorage: L2CParamsAssetsStorage;
    viewports?: Array<'desktop' | 'tablet' | 'mobile'>;
};

/**
 * @deprecated This type is deprecated and will be removed soon.
 */
export declare type L2CParamsAssetsStorage = L2CParamsBundledAssetsStorage;

/**
 * @deprecated This type is deprecated and will be removed soon.
 */
export declare type L2CParamsBundledAssetsStorage = {
    type: 'bundled';
    referencePath?: string;
    importMode?: 'watermarked' | 'original';
};

/**
 * @deprecated This type is deprecated and will be removed soon.
 */
export declare type L2CParamsConvention = L2CParamsHtmlConvention | L2CParamsReactConvention;

/**
 * @deprecated This type is deprecated and will be removed soon.
 */
export declare type L2CParamsFramework = 'html' | 'react';

/**
 * @deprecated This type is deprecated and will be removed soon.
 */
export declare type L2CParamsHtmlConvention = {
    framework: 'html';
    styling: L2CParamsStyling;
};

/**
 * @deprecated This type is deprecated and will be removed soon.
 */
export declare type L2CParamsInput = L2CParamsUrlInput;

/**
 * @deprecated This type is deprecated and will be removed soon.
 */
export declare type L2CParamsLanguage = 'typescript';

/**
 * @deprecated This type is deprecated and will be removed soon.
 */
export declare type L2CParamsReactConvention = {
    framework: 'react';
    language: L2CParamsLanguage;
    styling: L2CParamsStyling;
    enableGeneratePackageLock?: boolean;
};

/**
 * @deprecated This type is deprecated and will be removed soon.
 */
export declare type L2CParamsStyling = 'tailwind' | 'inline-styles';

/**
 * @deprecated This type is deprecated and will be removed soon.
 */
export declare type L2CParamsUrlInput = {
    type: "url";
    url: string;
};

export declare class NotFound extends Error {
    fileKey: string;
    constructor({ fileKey, cause }: {
        fileKey: string;
        cause?: unknown;
    });
}

export declare type ProgressMessage = {
    id: string;
    title: string;
    subtitle?: string;
    body?: string;
    status: "success" | "running";
};

export declare class RateLimitExceeded extends Error {
    fileKey: string;
    constructor({ fileKey, cause }: {
        fileKey: string;
        cause?: unknown;
    });
}

export declare class RequestTooLarge extends Error {
    fileKey: string;
    constructor({ fileKey, cause }: {
        fileKey: string;
        cause?: unknown;
    });
}

export declare class ResponseError extends Error {
    response: Response;
    constructor(message: string, res: Response);
}

/**
 * Errors from the SDK
 */
export declare type SDKErrorReason = "Invalid body payload" | "Connection closed before the 'done' message" | "Response body is null";

/**
 * @deprecated This type is deprecated and will be removed soon.
 */
export declare type SSECodegenMessage = SSEGetCodeFromFigmaMessage;

export declare type SSECommonMessage = {
    type: "queueing";
    payload: {
        sessionId: string;
    };
} | {
    type: "progress_messages_updated";
    payload: {
        progressMessages: ProgressMessage[];
    };
} | {
    type: "job_status_updated";
    payload: {
        jobStatus: Record<string, any>;
    };
} | {
    type: "aborted";
};

export declare type SSEErrorPayload<Reason> = {
    errorName: string;
    task?: string;
    reason: Reason;
    sentryTraceId?: string;
};

export declare type SSEGetCodeFromFigmaMessage = SSECommonMessage | {
    type: "start";
    sessionId: string;
} | {
    type: "figma_metadata";
    figmaFileName: string;
    figmaSelectedFrameName: string;
} | {
    type: "pre_codegen";
    message: string;
} | {
    type: "generating_code";
    payload: GeneratingCodePayload;
} | {
    type: "codegen_completed";
} | {
    type: "post_codegen";
    message: string;
} | {
    type: "assets_uploaded";
} | {
    type: "assets_list";
    payload: {
        assets: Array<{
            name: string;
            url: string;
        }>;
    };
} | {
    type: "error";
    payload: SSEGetCodeFromFigmaMessageErrorPayload;
} | {
    type: "done";
    payload: {
        sessionId: string;
        tokenUsage: number;
    };
};

export declare type SSEGetCodeFromFigmaMessageErrorPayload = SSEErrorPayload<GetCodeFromFigmaErrorReason>;

export declare type SSEGetCodeFromPromptMessage = SSECommonMessage | {
    type: "start";
    sessionId: string;
} | {
    type: "generation_completed";
} | {
    type: "error";
    payload: SSEGetCodeFromPromptMessageErrorPayload;
} | {
    type: "done";
    payload: {
        sessionId: string;
        tokenUsage: number;
    };
};

export declare type SSEGetCodeFromPromptMessageErrorPayload = SSEErrorPayload<GetCodeFromPromptErrorReason>;

export declare type SSEGetCodeFromWebsiteMessage = SSECommonMessage | {
    type: "start";
    sessionId: string;
} | {
    type: "generating_code";
    payload: GeneratingCodePayload;
} | {
    type: "generation_completed";
} | {
    type: "post_codegen";
    message: string;
} | {
    type: "assets_uploaded";
} | {
    type: "assets_list";
    payload: {
        assets: Array<{
            name: string;
            url: string;
        }>;
    };
} | {
    type: "error";
    payload: SSEGetCodeFromWebsiteMessageErrorPayload;
} | {
    type: "done";
    payload: {
        sessionId: string;
        tokenUsage: number;
    };
};

export declare type SSEGetCodeFromWebsiteMessageErrorPayload = SSEErrorPayload<GetCodeFromWebsiteErrorReason>;

/**
 * @deprecated This type is deprecated and will be removed soon.
 */
export declare type SSEL2CMessage = SSEGetCodeFromWebsiteMessage;

export declare type StreamCodeFromPromptMessage = StreamMessage<SSEGetCodeFromPromptMessage>;

export declare type StreamCodeFromWebsiteMessage = StreamMessage<SSEGetCodeFromWebsiteMessage>;

export declare type StreamCodgenMessage = StreamMessage<SSEGetCodeFromFigmaMessage>;

declare type StreamErrorPayload = {
    name: string;
    message: GetCodeFromFigmaErrorReason;
    status?: number;
    detail?: unknown;
    errorPayload?: SSEGetCodeFromFigmaMessageErrorPayload;
};

export declare type StreamL2CMessage = StreamMessage<SSEGetCodeFromWebsiteMessage>;

export declare type StreamMessage<T> = Exclude<T, {
    type: "error";
}> | {
    type: "error";
    payload: StreamErrorPayload;
};

export declare type TrackingInfos = {
    externalId: string;
};

export declare class UnknownFigmaApiException extends Error {
    fileKey: string;
    constructor({ fileKey, cause }: {
        fileKey: string;
        cause: unknown;
    });
}

declare type ValidateNodeForCodegenResult = {
    isValid: true;
    node: FigmaNode;
    note?: "Selected node is a page with a single valid children - returning it instead";
} | {
    isValid: true;
    node: FigmaNode;
    note?: "Selected node is a page with multiple valid children - returning the first one instead";
} | {
    isValid: false;
    reason: InvalidNodeForCodegenReason;
};

export declare const validateSettings: (obj: unknown) => CodegenSettings;

export declare const wrapFigmaApiError: (error: FigmaApiError, fileKey: string) => Error;

export { }
